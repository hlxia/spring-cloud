代码架构：
 ┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
   ┃
   ┃━━━━━━┓Interfaces
   ┃      ┃
   ┃      ┃━━━━━━━ DTO
   ┃      ┃
   ┃      ┣━━━━━━━ Assembler
   ┃      ┃
   ┃      ┣━━━━━━━ Assembler
   ┃      ┃
   ┃      ┗━━━━━━━ Facade
   ┃
   ┣━━━━━━ Application
   ┃
   ┃
   ┣━━━━━━ Domain
   ┃
   ┃
   ┗━━━━━━ Infrastructure


   ┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅


   ======================
   ‖ 1.Interfaces-接口层 ‖
   ======================
   该层包含与其他系统进行交互的接口与通信设施，在多数应用里，该层可能提供包括Web Services、RMI或
   Rest等在内的一种或多种通信接口。该层主要由Façade、DTO和Assembler三类组件构成，三类组件均是典型的J2EE模式，
   以下是对三类组件的具体介绍：
       1.1 DTO:
           DTO- DataTransfer Object（数据传输对象），也常被称作VO-Value Object(值对象)。
           基于面向对象技术设计的领域对象（即通常所说的“实体”）都是细粒度的，将细粒度的领域对象直接传递到远程调用端需要进行
           多次网络通信，DTO在设计之初的主要考量是以粗粒度的数据结构减少网络通信并简化调用接口。

       1.2 Assembler:
           DTO与领域对象之间的相互转换工作多由Assembler承担，因此Assembler几乎总是同DTO一起出现。也有一些系统使用反射机制
           自动实现DTO与领域对象之间的相互转换，Appache的Commons BeanUtils就提供了类似的功能。应该说这两种实现各有利弊，
           使用Assembler进行对象数据交换更为安全与可控，并且接受编译期检查，但是代码量明显偏多。使用反射机制自动进行象数据
           交换虽然代码量很少，但却是非常脆弱的，一旦对象属性名发生了变化，数据交互就会失败，并且很难追踪发现。总体来说，
           Assembler更为直白和稳妥

       1.3 Facade：
           Façade的用意在于为远程客户端提供粗粒度的调用接口。Façade本身不处理任何的业务逻辑，它的主要工作就是将一个用户请求委派
           给一个或多个Service进行处理，同时借助Assembler将Service传入或传出的领域对象转化为DTO进行传输。

   =======================
   ‖ 2.Application-应用层 ‖
   =======================
   Application层中主要组件就是Service,在领域驱动设计的架构里，Service的组织粒度和接口设计依据与传统
   Transaction Script风格的Service是一致的，但是两者的实现却有着质的区别。TransactionScript风格的Service是
   实现业务逻辑的主要场所，因此往往非常厚重。而在领域驱动设计的架构里，Application是非常“薄”的一层，所有的Service
   只负责协调并委派业务逻辑给领域对象进行处理，其本身并真正实现业务逻辑，绝大部分的业务逻辑都由领域对象承载和实现了，
   这是区别系统是Transaction Script架构还是Domain Model架构的重要标志。

   ==================
   ‖ 3.Domain-领域层 ‖
   ==================
   Domain层是整个系统的核心层，该层维护一个使用面向对象技术实现的领域模型，几乎全部的业务逻辑会在该层实现。Domain
   层包含Entity（实体）、ValueObject(值对象)、Domain Event（领域事件）和Repository（仓储）等多种重要的领域组件。

   ==============================
   ‖ 4.Infrastructure-基础设施层 ‖
   ==============================
   作为基础设施层，Infrastructure为Interfaces、Application和Domain三层提供支撑。所有与具体平台、框架相关的实现
   会在Infrastructure中提供，避免三层特别是Domain层掺杂进这些实现，从而“污染”领域模型。Infrastructure中最常见的
   一类设施是对象持久化的具体实现。

   ==================================================================================================================